Example 1. Declaring a simple compile-time dependency
[source,java,indent=0,subs="verbatim,quotes",role="primary"]
.Groovy
----
dependencies {
    implementation 'log4j:log4j:1.2.12' // <1>
}
----
<1> 将 Log4J 版本 `1.2.12` 舔加到  implementation 配置(作用域)

[source,kotlin,indent=0,subs="verbatim,quotes",role="secondary"]
.Kotlin
----
dependencies {
    implementation("log4j:log4j:1.2.12") // <1>
}
----
<1> 将 Log4J 版本 `1.2.12` 舔加到  implementation 配置(作用域)

====
.groovy
[source,groovy,role="primary"]
----

----
.Kotlin
[source,kotlin,role="secondary"]
----

----
====

。   ------- .
;    -------  ;
：   ------- :
，   ------- ,
“”   ------- ""
?    ------- ?
（） ------- ()
【】 ------- []
{}   ------- {}
【
￥


依赖,依赖------》依赖
构件,工件, artifacts -----------  artifacts
存储库 --------》 仓库
图像,映像 -------》 镜像，图片
symbol
魔术 -------------- 魔法值
信息库/仓库/商店 -------- 存储库
热装 -------------- 热加载
订购 -------------- 排序
筛选器 ------------ 过滤器
缺省 -------------- 默认
批注/注释 ---------- 注解
侦听 -------------- 监听
范围 -------------- 作用域
执行器 ------------ Actuator
流畅/流利 -------------- 流式
依赖项 ------------ 依赖
谓词 -------------- 断言
键入 -------------- 输入
域类型/域模型 ------  domain
名称空间 ---------- 命名空间
档案 -- archive
终结点/终端 ------------- 端点
活动--------------- active
标头----------
频道/渠道 ------ 通道
插槽 ----------- slots
本机 ----------- 本地
键空间 --------- keyspaces
派生 ----------- 扩展
公开 ----------- 暴露
承受/承受能力/支付 ---- affordance
密钥/键 -------------- key
样本 ----------------- 示例
自身 ----------------- self
跃点  ---------------- hop
项目 ----------------- items
分辨率 --------------- 解析
反应 ----------------- 响应
度量 ----------------- 指标


[[sec:shortcut_notations]]
== Groovy DSL 快捷方式

有一种方便的表示法,用于访问 _existing_ 任务.每个任务都可以作为构建脚本的属性来使用:

.Accessing task as a property of the build script
====
include::{snippets-dir}/tutorial/helloWithShortCut/groovy/build.gradle[]

.**`gradle -q hello`** 输出
----
> gradle -q hello
include::{snippets-dir}/tutorial/helloWithShortCut/tests/helloWithShortCut.out[]
----
====

这使得代码非常可读,尤其是在使用插件提供的任务时,例如 `compile` 任务.

[[sec:extra_task_properties]]
== 额外 task 属性

您可以将自己的属性添加到任务.若要添加名为 `myProperty` 的属性,请将 `ext.myProperty` 设置为初始值.从那时起,可以像预定义的任务属性一样读取和设置属性.

.Adding extra properties to a task
====
include::{snippets-dir}/tutorial/extraProperties/groovy/build.gradle[tags=taskProperties]
include::{snippets-dir}/tutorial/extraProperties/kotlin/build.gradle.kts[tags=taskProperties]

.**`gradle -q printTaskProperties`** 输出
----
> gradle -q printTaskProperties
include::{snippets-dir}/tutorial/extraProperties/tests/extraTaskProperties.out[]
----
====

<<writing_build_scripts.adoc#sec:extra_properties,Extra properties>>不仅限于任务.您可以在其他属性中阅读有关它们的更多信息.



[[webflux-oauth2-login-openid-provider-configuration]]
== 使用 OpenID 提供程序配置

对于知名的提供商,Spring Security 为 OAuth 授权提供商的配置提供了必要的默认值.  如果您正在使用支持 https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig[OpenID Provider Configuration] 或 https://tools.ietf.org/html/rfc8414#section-3[授权服务器],
则可以使用 https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse[OpenID Provider Configuration Response]的 `issuer-uri` 来配置应用程序.

[source,yml]
----
spring:
  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: https://idp.example.com/auth/realms/demo
        registration:
          keycloak:
            client-id: spring-security
            client-secret: 6cea952f-10d0-4d00-ac79-cc865820dc2c
----

`issuer-uri` 指示Spring Security依次查询端点 `https://idp.example.com/auth/realms/demo/.well-known/openid-configuration`, `https://idp.example.com/.well-known/openid-configuration/auth/realms/demo`, or  `https://idp.example.com/.well-known/oauth-authorization-server/auth/realms/demo` 来发现配置.


[NOTE]
Spring Security 将一次查询一个端点,并在第一个端点发出 200 响应时停止.

`client-id` 和 `client-secret` 链接到提供程序,因为 `keycloak` 用于提供程序和注册.

[[webflux-oauth2-login-explicit]]
== 显式 OAuth2 登录配置

最小的 OAuth2 登录配置如下所示:

.Minimal OAuth2 Login
====
.Java
[source,java,role="primary"]
----
@Bean
ReactiveClientRegistrationRepository clientRegistrations() {
	ClientRegistration clientRegistration = ClientRegistrations
			.fromIssuerLocation("https://idp.example.com/auth/realms/demo")
			.clientId("spring-security")
			.clientSecret("6cea952f-10d0-4d00-ac79-cc865820dc2c")
			.build();
	return new InMemoryReactiveClientRegistrationRepository(clientRegistration);
}

@Bean
SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
	http
		// ...
		.oauth2Login(withDefaults());
	return http.build();
}
----

.Kotlin
[source,kotlin,role="secondary"]
----
@Bean
fun clientRegistrations(): ReactiveClientRegistrationRepository {
    val clientRegistration: ClientRegistration = ClientRegistrations
            .fromIssuerLocation("https://idp.example.com/auth/realms/demo")
            .clientId("spring-security")
            .clientSecret("6cea952f-10d0-4d00-ac79-cc865820dc2c")
            .build()
    return InMemoryReactiveClientRegistrationRepository(clientRegistration)
}

@Bean
fun webFilterChain(http: ServerHttpSecurity): SecurityWebFilterChain {
    return http {
        oauth2Login { }
    }
}
----
====

其他配置选项如下所示:

.Advanced OAuth2 Login
====
.Java
[source,java,role="primary"]
----
@Bean
SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
	http
		// ...
		.oauth2Login(oauth2 -> oauth2
			.authenticationConverter(converter)
			.authenticationManager(manager)
			.authorizedClientRepository(authorizedClients)
			.clientRegistrationRepository(clientRegistrations)
		);
	return http.build();
}
----

.Kotlin
[source,kotlin,role="secondary"]
----
@Bean
fun webFilterChain(http: ServerHttpSecurity): SecurityWebFilterChain {
    return http {
        oauth2Login {
            authenticationConverter = converter
            authenticationManager = manager
            authorizedClientRepository = authorizedClients
            clientRegistrationRepository = clientRegistration
        }
    }
}
----
====

您可以注册 `GrantedAuthoritiesMapper` `@Bean` 使其自动应用于默认配置， 如以下示例所示:

.GrantedAuthoritiesMapper Bean
====
.Java
[source,java,role="primary"]
----
@Bean
public GrantedAuthoritiesMapper userAuthoritiesMapper() {
    ...
}

@Bean
SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
	http
		// ...
		.oauth2Login(withDefaults());
	return http.build();
}
----

.Kotlin
[source,kotlin,role="secondary"]
----
@Bean
fun userAuthoritiesMapper(): GrantedAuthoritiesMapper {
   // ...
}

@Bean
fun webFilterChain(http: ServerHttpSecurity): SecurityWebFilterChain {
    return http {
        oauth2Login { }
    }
}
----
====
