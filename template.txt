Example 1. Declaring a simple compile-time dependency
[source,java,indent=0,subs="verbatim,quotes",role="primary"]
.Groovy
----
dependencies {
    implementation 'log4j:log4j:1.2.12' // <1>
}
----
<1> 将 Log4J 版本 `1.2.12` 舔加到  implementation 配置(作用域)

[source,kotlin,indent=0,subs="verbatim,quotes",role="secondary"]
.Kotlin
----
dependencies {
    implementation("log4j:log4j:1.2.12") // <1>
}
----
<1> 将 Log4J 版本 `1.2.12` 舔加到  implementation 配置(作用域)

====
.groovy
[source,groovy,role="primary"]
----

----
.Kotlin
[source,kotlin,role="secondary"]
----

----
====

。   ------- .
;    -------  ;
：   ------- :
，   ------- ,
“”   ------- ""
?    ------- ?
（） ------- ()
【】 ------- []
{}   ------- {}
【
￥


依赖,依赖------》依赖
构件,工件, artifacts -----------  artifacts
存储库 --------》 仓库
图像,映像 -------》 镜像，图片
symbol
魔术 -------------- 魔法值
信息库/仓库/商店 -------- 存储库
热装 -------------- 热加载
订购 -------------- 排序
筛选器 ------------ 过滤器
缺省 -------------- 默认
批注/注释 ---------- 注解
侦听 -------------- 监听
范围 -------------- 作用域
执行器 ------------ Actuator
流畅/流利 -------------- 流式
依赖项 ------------ 依赖
谓词 -------------- 断言
键入 -------------- 输入
域类型/域模型 ------  domain
名称空间 ---------- 命名空间
档案 -- archive
终结点/终端 ------------- 端点
活动--------------- active
标头----------
频道/渠道 ------ 通道
插槽 ----------- slots
本机 ----------- 本地
键空间 --------- keyspaces
派生 ----------- 扩展
公开 ----------- 暴露
承受/承受能力/支付 ---- affordance
密钥/键 -------------- key
样本 ----------------- 示例
自身 ----------------- self
跃点  ---------------- hop
项目 ----------------- items
分辨率 --------------- 解析
反应 ----------------- 响应
度量 ----------------- 指标


[[sec:shortcut_notations]]
== Groovy DSL 快捷方式

有一种方便的表示法,用于访问 _existing_ 任务.每个任务都可以作为构建脚本的属性来使用:

.Accessing task as a property of the build script
====
include::{snippets-dir}/tutorial/helloWithShortCut/groovy/build.gradle[]

.**`gradle -q hello`** 输出
----
> gradle -q hello
include::{snippets-dir}/tutorial/helloWithShortCut/tests/helloWithShortCut.out[]
----
====

这使得代码非常可读,尤其是在使用插件提供的任务时,例如 `compile` 任务.

[[sec:extra_task_properties]]
== 额外 task 属性

您可以将自己的属性添加到任务.若要添加名为 `myProperty` 的属性,请将 `ext.myProperty` 设置为初始值.从那时起,可以像预定义的任务属性一样读取和设置属性.

.Adding extra properties to a task
====
include::{snippets-dir}/tutorial/extraProperties/groovy/build.gradle[tags=taskProperties]
include::{snippets-dir}/tutorial/extraProperties/kotlin/build.gradle.kts[tags=taskProperties]

.**`gradle -q printTaskProperties`** 输出
----
> gradle -q printTaskProperties
include::{snippets-dir}/tutorial/extraProperties/tests/extraTaskProperties.out[]
----
====

<<writing_build_scripts.adoc#sec:extra_properties,Extra properties>>不仅限于任务.您可以在其他属性中阅读有关它们的更多信息.