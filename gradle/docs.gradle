import org.asciidoctor.gradle.jvm.AsciidoctorJPlugin

/**
 * Produce Javadoc for all Spring Framework modules in "build/docs/javadoc"
 */
apply plugin: "com.jcohy.docs"
apply plugin: "com.jcohy.oss-upload"

ext{
	language = "zh-cn"
	component = project.name
	version = project.version
}


task aggregatedAsciidoctor(type: Copy.class) {
	project.rootProject.gradle.projectsEvaluated {

		Set<Project> excludedPdfProjects = ['spring-security','spring-boot']

		Set<Project> docsProjects = rootProject.subprojects.findAll {it != project }
				.findAll { it.plugins.hasPlugin(AsciidoctorJPlugin) }

		Set<Project> docsPdfProject = docsProjects.findAll{!excludedPdfProjects.contains(it.name)}
		dependsOn docsProjects.aggregatedProject
		dependsOn docsPdfProject.asciidoctorPdf
		destinationDir = project.file "${buildDir}/reference"
		docsProjects.each {project ->
			if(project.tasks.names.contains("asciidoctorMultiPage")){
				if(!project.name.contains("spring-data-")) {
					dependsOn project.asciidoctorMultiPage
				}
				from(project.asciidoctor.outputDir) {
					into project.name+"/"+project.version+"/htmlsingle"
				}
				from(project.asciidoctorMultiPage.outputDir) {
					into project.name+"/"+project.version+"/html5"
				}
			} else {
				from(project.asciidoctor.outputDir) {
					into project.name+"/"+project.version+"/html5"
				}
			}
			from(project.asciidoctorPdf.outputDir) {
				into project.name+"/"+project.version+"/pdf"
			}
		}
	}
}

alioss {
	accessKey = System.getenv("ACCESS_KEY")
	secretKey = System.getenv("SECRET_KEY")
}

task docsZip(type: Zip) {

	dependsOn aggregatedAsciidoctor

	duplicatesStrategy "fail"

	archiveFileName = "docs.zip"

	from("$buildDir/reference") {
		into "reference"
	}
}

artifacts {
	archives docsZip
}

publishing {
	publications {
		maven(MavenPublication) {
			artifact docsZip
		}
	}
}
